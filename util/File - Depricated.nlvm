package util;

/*Class to access data within files
  It has static variables because I dont want it to be instanced
*/
public class File
{
  private static final String[][] tags = Tag.tags;
  private String fileString;

  public File(){}
  public File(String s){
    fileString = s;
  }

  public String returnFileContents(){
    return fileString;
  }
  //do a full read through of the file to check for issues
  public static String parse(String file)
  {
    /*
    char[] fileChar = file.toCharArray();
    StringBuilder builder = new StringBuilder();
    String updatedFile;

    //remove all spaces in the file
    for(int i1 = 0; i1 < file.length(); i1++)
    {
      if(!String.valueOf(fileChar[i1]).equals(" "))
      {
        builder.append(fileChar[i1]);
      }
    }
    */

    //updatedFile = builder.toString();
    String updatedFile = file;
    //System.out.println("Parsed file " + updatedFile);

    for(int i2 = 0; i2 < tags.length; i2++)
    {
      //find the opening and closing tags
      int tagStartIndex = findOpenTagInFile(tags[i2][0], updatedFile);
      int tagEndIndex = findCloseTagInFile(tags[i2][1], updatedFile);

      //check to see if theres data
      if(tagStartIndex != tagEndIndex)
      {
        //create a new string containing the data
        String subString = file.substring(tagStartIndex, tagEndIndex);
        //output for debbuging
        System.out.println("Created substring between index " + tagStartIndex + "-" + tagEndIndex + " data : " + subString);
      }
    }

    return updatedFile;
  }

  //get a string value of data contained within tags
  public static String getTagData(String tag, String file)
  {
    //create the opeing/closing tags
    String openTag = ("<" + tag + ">");
    String closeTag = ("</" + tag + ">");

    //get the tag indexes
    int tagStartIndex = findOpenTagInFile(openTag, file);
    int tagEndIndex = findCloseTagInFile(closeTag, file);

    //create the substring and return the data
    String subString = file.substring(tagStartIndex, tagEndIndex);
    return subString;
  }

  //find the opening tag
  public static int findOpenTagInFile(String tag, String file)
  {
    int tagLength = tag.length();
    char[] tagChar = tag.toCharArray();

    //loop through each character in the file
    for(int i1 = 0; i1 < file.length(); i1++)
    {
      //check if we are at the end of the file and stop if needed
      if((i1 + tagLength) > file.length())
      {
        //System.err.println("Could not find tag '" + tag + "' within file");
        return 0;
      }

      //check if the current character equals '<' and the next character doesnt equal '/'
      if(String.valueOf(file.charAt(i1)).equals("<") && !String.valueOf(file.charAt(i1 + 1)).equals("/"))
      {
        //System.err.print(i1 + " : " + i2 + " || ");
        //create a substring of the tag for debugging
        String subString = file.substring(i1, (i1)+tagLength);

        if(subString.equals(tag))
        {
          //System.out.println("Found tag " + tag + " at index " + (i1 -1) + "-" + ((i1 - 1) + tagLength));
          return i1 + tagLength;
        }
      }
    }

    return 0;
  }

  //find the closing tag
  public static int findCloseTagInFile(String tag, String file)
  {
    int tagLength = tag.length();
    char[] tagChar = tag.toCharArray();

    //loop through each character in the file
    for(int i1 = 0; i1 < file.length(); i1++)
    {
      //check if we are at the end of the file and stop if needed
      if((i1 + tagLength) > file.length())
      {
        //System.err.println("Could not find tag '" + tag + "' within file");
        return 0;
      }
      //check if the current character equals '<' and the next character equals '/'
      if(String.valueOf(file.charAt(i1)).equals("<") && String.valueOf(file.charAt(i1 + 1)).equals("/"))
      {
        String subString = file.substring(i1, i1 + tagLength);

        if(subString.equals(tag))
        {
          //System.out.println("Found tag " + tag + " at index " + (i1 -1) + "-" + ((i1 - 1) + tagLength));
          return i1;
        }
      }
    }

    return 0;
  }

  //find the end index of a string within another string
  public static int findEndOf(String text, String file)
  {
    int textLength = text.length();
    char[] textChar = text.toCharArray();

    //loop through each character in the file
    for(int i1 = 0; i1 < file.length(); i1++)
    {
      //check if we are at the end of the file and stop if needed
      if((i1 + textLength) > file.length())
      {
        System.err.println("Could not find tag '" + text + "' within file");
        return 0;
      }
      //check if the current character equals '<' and the next character equals '/'
      if(String.valueOf(file.charAt(i1)).equals(String.valueOf(textChar[0])) && String.valueOf(file.charAt(i1 + (textLength - 1))).equals(String.valueOf(textChar[textLength - 1])))
      {
        String subString = file.substring(i1, i1 + textLength);

        if(subString.equals(text))
        {
          System.err.println("Found tag " + text + " at index " + (i1 -1) + "-" + ((i1 - 1) + textLength));
          return (i1 - 1) + textLength;
        }
      }
    }
    return 0;
  }

  //find the start index of a string within another string
  public static int findStartOf(String text, String file)
  {
    int textLength = text.length();
    char[] textChar = text.toCharArray();

    //loop through each character in the file
    for(int i1 = 0; i1 < file.length(); i1++)
    {
      //check if we are at the end of the file and stop if needed
      if((i1 + textLength) > file.length())
      {
        System.err.println("Could not find tag '" + text + "' within file");
        return 0;
      }
      //check if the current character equals '<' and the next character equals '/'
      if(String.valueOf(file.charAt(i1)).equals(String.valueOf(textChar[0])) && String.valueOf(file.charAt(i1 + (textLength - 1))).equals(String.valueOf(textChar[textLength - 1])))
      {
        String subString = file.substring(i1, i1 + textLength);

        if(subString.equals(text))
        {
          //System.err.println("Found tag " + text + " at index " + (i1 -1) + "-" + ((i1 - 1) + textLength));
          return i1;
        }
      }
    }
    return 0;
  }

  //create a stack containing data from tags
  public static Stack createStackInsideTag(String tag, String file)
  {
    Stack tempStack = new Stack();

    if(tag == null || file == null)return null;

    //get substring containing data between the specified tags
    String subString = getTagData(tag, file);
    System.out.println("Creating stack from " + subString);

    //check that the substring returned contains data
    if(subString.length() == 0)return null;

    int i1 = 0;
    while(!findTagAfterIndex(i1, subString).equals("NA"))
    {
      String thing = findTagAfterIndex(i1, subString);
      tempStack.push(thing);
      i1 += findEndOf(thing, file);
    }

    return tempStack;
  }

  //find the next tag after starting index
  public static String findTagAfterIndex(int index, String file)
  {
    if((index + 1) >= file.length())return "NA";
    if((index + 1) + 2 >= file.length())return "NA";

    int startIndex = 0;
    int endIndex = 0;

    System.out.println("Above index " + (index + 1) + " which is char " + file.charAt(index + 1));

    for(int i = index; i < file.length(); i++)
    {
      //System.out.println(file.charAt(i));
      if(String.valueOf(file.charAt(i)).equals("<"))
      {
        //System.out.println("start at " + i);
        startIndex = i;
      }

      if(String.valueOf(file.charAt(i)).equals(">"))
      {
        //System.out.println("end at " + i);
        endIndex = i + 1;
        break;
      }
    }

    if(startIndex > endIndex)return "NA";

    String subString = file.substring(startIndex, endIndex);

    return subString;
  }
}
