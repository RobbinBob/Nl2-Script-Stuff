package util.xml.validation;

import nlvm.lang.Object;

public class Schema extends Object
{
  private static final char[] xmlChar = {'\t', '\b', '\n', '\r', '\f', ' ', '\0'};
  private static final char[] txtChar = {'\f'};

  private static final String[] xmlTagIds =
  {
    "block", "info", "blocksetup", "waittime", "transport", "brake",
    "blocklogic", "specialtrack", "switches", "switch", "movespeed",
    "wait"
  };

  private int validationType = 0;
  //contructor
  protected Schema(){}

  //methods
  public static Schema newInstance()
  {
    return new Schema();
  }

  public void setValidationType(String s)
  {
    if(s.equals("xml-Standard"))
    {
      //System.err.println("Set xml validation");
      validationType = 1;
    }else if(s.equals("txt"))
    {
      //System.err.println("Set txt validation");
      validationType = 2;
    }
  }

  public char[] getBlackListChar()
  {
    switch(validationType){
      case 1:
      return xmlChar;
      case 2:
      return txtChar;
    }
    return txtChar;
  }

  public String[] getTagIds()
  {
    return xmlTagIds;
  }

  public bool runValidator(String s){
    //check if its contained within <root>
    if(!s.startsWith("<root>") && !s.endsWith("</root>"))return false;

    //first check if theres a matching amount of <>
    int oChar=0, cChar=0;
    for(int i = 0; i < s.length(); i++){
      if(s.charAt(i) == '<'){
        oChar++;
      }
      if(s.charAt(i) == '>'){
        cChar++;
      }
    }

    if(oChar != cChar)return false;

    //check tags are laid out correctly
    int tagCheck = 0;
    for(int j = 0; j < s.length(); j++){
      if(s.charAt(j) == '<'){
        tagCheck++;
      }
      if(s.charAt(j) == '>'){
        tagCheck--;
      }

      if(tagCheck > 1 || tagCheck < 0)
      {
        return false;
      }
    }
    return true;
  }
}
